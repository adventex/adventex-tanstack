import m from"tiny-invariant";import{defaultTransformer as x}from"@tanstack/react-router";import{jsx as c}from"react/jsx-runtime";import*as l from"react";import{clsx as y}from"clsx";import{twMerge as g}from"tailwind-merge";function z(e,t,r){return Object.assign(e,{url:"https://localhost:3000"})}function C(e){return e instanceof Headers?new Headers(e):Array.isArray(e)?new Headers(e):typeof e=="object"?new Headers(e):new Headers}function N(...e){return e.reduce((t,r)=>{const n=C(r);for(const[a,s]of n.entries())t.set(a,s);return t},new Headers)}const b=[];function v(e,t){const r=t||e||{};return typeof r.method>"u"&&(r.method="GET"),{options:r,middleware:n=>v(void 0,Object.assign(r,{middleware:n})),validator:n=>v(void 0,Object.assign(r,{validator:n})),handler:(...n)=>{const[a,s]=n;Object.assign(r,{...a,extractedFn:a,serverFn:s}),m(a.url,"createServerFn must be called with a function that is marked with the 'use server' pragma. Are you using the @tanstack/start-vite-plugin ?");const o=[...r.middleware||[],_(r)];return Object.assign(async d=>h(o,"client",{...a,method:r.method,data:d?.data,headers:d?.headers,context:Object.assign({},a)}).then(i=>i.result),{...a,__executeServer:d=>{const i=d instanceof FormData?F(d):d;return h(o,"server",{...a,...i}).then(u=>({result:u.result,context:u.sendContext}))}})}}}function F(e){const t=e.get("__TSR_CONTEXT");if(e.delete("__TSR_CONTEXT"),typeof t!="string")return{context:{},data:e};try{return{context:x.parse(t),data:e}}catch{return{data:e}}}function O(e){const t=new Set,r=[],n=a=>{a.forEach(s=>{s.options.middleware&&n(s.options.middleware),t.has(s)||(t.add(s),r.push(s))})};return n(e),r}const w=(e,t,r)=>e({data:t.data,context:t.context,sendContext:t.sendContext,method:t.method,next:n=>{const a={...t.context,...n?.context},s={...t.sendContext,...n?.sendContext??{}},o=N(t.headers,n?.headers);return r({method:t.method,data:t.data,context:a,sendContext:s,headers:o,result:n?.result??t.result})}});function T(e,t){if(e==null)return{};if("~standard"in e){const r=e["~standard"].validate(t);if(r instanceof Promise)throw new Error("Async validation not supported");if(r.issues)throw new Error(JSON.stringify(r.issues,void 0,2));return r.value}if("parse"in e)return e.parse(t);if(typeof e=="function")return e(t);throw new Error("Invalid validator type!")}async function h(e,t,r){const n=O([...b,...e]),a=async s=>{const o=n.shift();if(!o)return s;o.options.validator&&(t!=="client"||o.options.validateClient)&&(s.data=await T(o.options.validator,s.data));const d=t==="client"?o.options.client:o.options.server;return d?w(d,s,async i=>{if(t==="client"&&o.options.clientAfter){const u=await a(i);return w(o.options.clientAfter,u,p=>p)}return a(i)}):a(s)};return a({...r,headers:r.headers||{},sendContext:r.sendContext||{},context:r.context||{}})}function _(e){return{_types:void 0,options:{validator:e.validator,validateClient:e.validateClient,client:async({next:t,sendContext:r,...n})=>{var a;const s=await((a=e.extractedFn)==null?void 0:a.call(e,{...n,context:r}));return t(s)},server:async({next:t,...r})=>{var n;const a=await((n=e.serverFn)==null?void 0:n.call(e,r));return t({result:a})}}}}function f(...e){return g(y(e))}const H=l.forwardRef(({className:e,...t},r)=>c("div",{ref:r,className:f("rounded-xl border bg-card text-card-foreground shadow",e),...t}));H.displayName="Card";const M=l.forwardRef(({className:e,...t},r)=>c("div",{ref:r,className:f("flex flex-col space-y-1.5 p-6",e),...t}));M.displayName="CardHeader";const j=l.forwardRef(({className:e,...t},r)=>c("div",{ref:r,className:f("font-semibold leading-none tracking-tight",e),...t}));j.displayName="CardTitle";const S=l.forwardRef(({className:e,...t},r)=>c("div",{ref:r,className:f("text-sm text-muted-foreground",e),...t}));S.displayName="CardDescription";const E=l.forwardRef(({className:e,...t},r)=>c("div",{ref:r,className:f("p-6 pt-0",e),...t}));E.displayName="CardContent";const A=l.forwardRef(({className:e,...t},r)=>c("div",{ref:r,className:f("flex items-center p-6 pt-0",e),...t}));A.displayName="CardFooter";export{H as C,z as a,E as b,v as c,j as d,S as e,f,M as g,A as h};
